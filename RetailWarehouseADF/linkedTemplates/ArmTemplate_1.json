{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RetailWarehouseADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Full_Load_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CustomerTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.Customer"
							},
							{
								"name": "Destination",
								"value": "staging//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customer_Id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "customer_Id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DOB",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DOB",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "city_code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "city_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Customer_Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Customer_Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Created_Modified_Date",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Created_Modified_Date",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CustomerTableOnprem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Staging_All_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TransactionTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CustomerTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.Transactions"
							},
							{
								"name": "Destination",
								"value": "staging//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "cust_id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "cust_id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "tran_date",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "tran_date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "prod_subcat_code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "prod_subcat_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "prod_cat_code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "prod_cat_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Qty",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Qty",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Rate",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Rate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Tax",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Tax",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "total_amt",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "total_amt",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Store_type",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Store_type",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TransactionsTableOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Staging_All_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ProductCatSubCat",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransactionTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/Product-Category-Subcategory.csv"
							},
							{
								"name": "Destination",
								"value": "staging//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "prod_cat_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "prod_cat_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "prod_cat",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "prod_cat",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "prod_sub_cat_code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "prod_sub_cat_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "prod_subcat",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "prod_subcat",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ProductCatSubCat_FileSystem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Staging_All_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Customer_SCD type 1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Staging_Customer",
								"type": "DatasetReference"
							},
							"name": "ADLSstagingCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "SinkDimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "SinkUpdateDimCustomer"
						}
					],
					"transformations": [
						{
							"name": "Exists"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tcustomer_Id as string,\n\t\tDOB as string,\n\t\tGender as string,\n\t\tcity_code as string,\n\t\tCustomer_Name as string,\n\t\tCreated_Modified_Date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ADLSstagingCustomer\nsource(output(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomer\nADLSstagingCustomer, DimCustomer exists(toInteger(ADLSstagingCustomer@customer_Id) == DimCustomer@customer_Id,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists derive(customerId = toInteger(customer_Id)) ~> DerivedColumn1\nADLSstagingCustomer, DimCustomer exists(toInteger(ADLSstagingCustomer@customer_Id) == DimCustomer@customer_Id,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(CustomerId = toInteger(customer_Id)) ~> DerivedColumn2\nDerivedColumn2 alterRow(updateIf(true())) ~> AlterRow1\nDerivedColumn1 sink(input(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tcustomer_Id = customerId,\n\t\tcustomer_name = Customer_Name,\n\t\tDOB,\n\t\tcity_code,\n\t\tgender = Gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkDimCustomer\nAlterRow1 sink(input(\n\t\tcustomer_key as integer,\n\t\tcustomer_Id as integer,\n\t\tcustomer_name as string,\n\t\tDOB as string,\n\t\tcity_code as string,\n\t\tgender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['customer_Id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tcustomer_Id = CustomerId,\n\t\tcustomer_name = Customer_Name,\n\t\tDOB,\n\t\tcity_code,\n\t\tgender = Gender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkUpdateDimCustomer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_ProCatSubCat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Staging_ProdCatSubCat",
								"type": "DatasetReference"
							},
							"name": "ADLSstagingProCatSubCat"
						},
						{
							"dataset": {
								"referenceName": "Dim_ProdCatSubCat",
								"type": "DatasetReference"
							},
							"name": "DimProdCatSubCat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dim_ProdCatSubCat",
								"type": "DatasetReference"
							},
							"name": "SinkDimProdCatSubCatInsert"
						}
					],
					"transformations": [
						{
							"name": "Exists1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tprod_cat_code as integer,\n\t\tprod_cat as string,\n\t\tprod_sub_cat_code as integer,\n\t\tprod_subcat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ADLSstagingProCatSubCat\nsource(output(\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tProduct_Cat_Code as integer,\n\t\tProduct_Category as string,\n\t\tProduct_SubCat_Code as integer,\n\t\tProduct_SubCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimProdCatSubCat\nADLSstagingProCatSubCat, DimProdCatSubCat exists(prod_cat_code == Product_Cat_Code\n\t&& prod_sub_cat_code == Product_SubCat_Code,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 derive(ProductCatCode = toInteger(prod_cat_code),\n\t\tProdSubCatCode = toInteger(prod_sub_cat_code)) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tProd_Cat_SubCat_Key as integer,\n\t\tProduct_Cat_Code as integer,\n\t\tProduct_Category as string,\n\t\tProduct_SubCat_Code as integer,\n\t\tProduct_SubCategory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tProduct_Cat_Code = ProductCatCode,\n\t\tProduct_Category = prod_cat,\n\t\tProduct_SubCat_Code = ProdSubCatCode,\n\t\tProduct_SubCategory = prod_subcat\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkDimProdCatSubCatInsert"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateConfigLastModDate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowStagingInputs",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ConfigTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ConfigTable",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "parameters{\n\tSourceTable as string,\n\tWaterMarkField as string\n}\nsource(output(\n\t\tcustomer_Id as string,\n\t\tDOB as string,\n\t\tGender as string,\n\t\tcity_code as string,\n\t\tCustomer_Name as string,\n\t\tCreated_Modified_Date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($SourceTable)]) ~> source1\nConditionalSplit1@Customer aggregate(Max_Created_Modified_Date = max(toTimestamp(toString(byName($WaterMarkField)),'dd-MM-yyyy HH:mm'))) ~> Aggregate1\nAggregate1 derive(TableName = $SourceTable) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(isNull(Max_Created_Modified_Date)==false())) ~> AlterRow1\nsource1 split(equals($SourceTable,'Customer.csv'),\n\tequals($SourceTable,'Transactions.csv'),\n\tdisjoint: false) ~> ConditionalSplit1@(Customer, Transactions)\nConditionalSplit1@Transactions aggregate(Max_Tran_Date = max(toTimestamp(byName(lower($WaterMarkField)),'dd-MM-yyyy'))) ~> Aggregate2\nAggregate2 derive(TableName = $SourceTable) ~> DerivedColumn2\nDerivedColumn2 alterRow(updateIf(isNull(Max_Tran_Date)==false())) ~> AlterRow2\nAlterRow1 sink(input(\n\t\tSource as string,\n\t\tSource_Table as string,\n\t\tDest_Table as string,\n\t\tColumns as string,\n\t\tWatermark_Column as string,\n\t\tWatermark_Value as timestamp,\n\t\tEnabled as boolean,\n\t\tLoad_Flag as string,\n\t\tStatus as string,\n\t\tComment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Dest_Table'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tDest_Table = TableName,\n\t\tWatermark_Value = Max_Created_Modified_Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nAlterRow2 sink(input(\n\t\tSource as string,\n\t\tSource_Table as string,\n\t\tDest_Table as string,\n\t\tColumns as string,\n\t\tWatermark_Column as string,\n\t\tWatermark_Value as timestamp,\n\t\tEnabled as boolean,\n\t\tLoad_Flag as string,\n\t\tStatus as string,\n\t\tComment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Dest_Table'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tDest_Table = TableName,\n\t\tWatermark_Value = Max_Tran_Date\n\t),\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delta_Load_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from dbo.config where Enabled=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter_Sql_Tables",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup_Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Config').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source,'SQLVM')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter_FlatFiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup_Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Config').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Source,'FileSystem')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach-SQL tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_Sql_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_Sql_Tables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition Based on Type of Load",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().Load_Flag,'Incremental'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFull Load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IncrementalSQLRetailOnprem",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "@{item().Source_Table}"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataLake",
														"type": "DatasetReference",
														"parameters": {
															"StagingFileName": "@{item().Dest_Table}"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "get max of Last MaxUpdateDate Config",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select Watermark_Value from dbo.config where Source_Table like '@{item().Source_Table}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "ConfigTable",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy Delta load from Tables to ADLS",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "get max of Last MaxUpdateDate Config",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "dbo.@{concat('substring(''', item().Source_Table, ''',4,string(length(''', item().Source_Table, ''')))')}"
													},
													{
														"name": "Destination",
														"value": "staging//@{item().Dest_Table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().Source_Table}\nwhere \nconvert(datetime,@{item().Watermark_Column},105) >\nconvert(datetime,substring(\nreplace('@{activity('get max of Last MaxUpdateDate Config').output.firstRow.Watermark_Value}',\n'T',' '),0,20),120)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "IncrementalSQLRetailOnprem",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "substring('@{item().Source_Table}',4,string(length('@{item().Source_Table}')))",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "IncrementalSinkDataLake",
														"type": "DatasetReference",
														"parameters": {
															"StagingFileName": "@{item().Dest_Table}"
														}
													}
												]
											},
											{
												"name": "Update Config Watermark",
												"description": "Update config Tables' Watermark Values based on the last modified date of records in tables staged to ADLS.",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "Set Watermark_Filed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "UpdateConfigLastModDate",
														"type": "DataFlowReference",
														"parameters": {
															"SourceTable": {
																"value": "'@{variables('sourceFile')}'",
																"type": "Expression"
															},
															"WaterMarkField": {
																"value": "'@{variables('WatermarkField')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"source1": {
																"StagingFileName": "@{item().Dest_Table}"
															},
															"sink1": {},
															"sink2": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "None",
													"cacheSinks": {
														"firstRowOnly": true
													}
												}
											},
											{
												"name": "Set SourceFile",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Delta load from Tables to ADLS",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "sourceFile",
													"value": {
														"value": "@{item().Dest_Table}",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set Watermark_Filed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set SourceFile",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "WatermarkField",
													"value": {
														"value": "@{item().Watermark_Column}",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "update cfg status",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "If Condition Based on Type of Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "update dbo.config \nset Status = 'Success' where Dest_Table = '@{item().Dest_Table}'\n\nselect 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ConfigTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEach-FlatFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_FlatFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_FlatFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AllFlatFiles",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().Source_Table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "IncrementalSinkDataLake",
											"type": "DatasetReference",
											"parameters": {
												"StagingFileName": "@item().Dest_Table"
											}
										}
									]
								},
								{
									"name": "update cfg status_copy1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "update dbo.config \nset Status = 'Success' where Dest_Table = '@{item().Dest_Table}';\nselect 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ConfigTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"sourceFile": {
						"type": "String"
					},
					"WatermarkField": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UpdateConfigLastModDate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_CustomerSCDtype1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Customer_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dim_Customer_SCD type 1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ADLSstagingCustomer": {},
									"DimCustomer": {},
									"SinkDimCustomer": {},
									"SinkUpdateDimCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dim_Customer_SCD type 1')]"
			]
		}
	]
}